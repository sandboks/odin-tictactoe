:root {
    --gridSquareBg: #eeeeee;
    --gridSquareBgOccupied: white;
    --colorPanelBorder: #b6b6b6;
    --colorTextNeutral: #9d9d9d;

    --colorPlayerOne: #0099ff;
    --colorPlayerTwo: #ff9d00;

    --colorPlayerCurrent: #ffffff;

    --currentSymbolURL: url("");
    /*--url: url(yoururl);*/
    --currentSymbolSize: 100%;

    --imageURLx: url("img/batsu.svg"); /* fun trivia factoid: "batsu" is Japanese for an "x" symbol */
    --sizePercentPlayerOne: 65%;
    --imageURLo: url("img/maru.svg"); /* fun trivia factoid: "maru" is Japanese for an "o" symbol */
    --sizePercentPlayerTwo: 83%;

    --imageURLshuffle: url("img/creation.svg");

    --durationFast: 0.1s;
    --durationFast2: 0.2s;
    --durationMedium: 0.5s;
    --durationSlow: 1.5s;

    --borderRadiusSmall: 0.25em;

    --buttonHeight: 3em;
    --buttonHeightMobile: 2em;

    --minHeightContent: 310px;
    --contentPadding: 1em;
    
    /*
    --main-color: #F28E1C;
    --border-highlight-color: #ffd100;
;
    --main-color-selection: #ffffff36;
    --main-color-projects: #e3e8ee;
    --main-color-light: rgb(238, 238, 238);

    --bg-darkmode: #3a3f47;
    --bg-darkmode2: #2b2d30;

    --font-color-softer: #6c6c6c;
    --font-color-softer-dark: #cecdcd;

    --padding-amount: 2em;
    --border-radius: 1em;
    --transition-time: .2s;
    */
}

@font-face {
    font-family:'LilitaOne';
    src: url('font/Lilita_One/LilitaOne-Regular.ttf');
}

body {
    font-family: Verdana, Geneva, Tahoma, sans-serif;

    margin: 0px;
}

/* DIALOG RELATED */

dialog {
    margin: 1em;
    padding: 2em;
    border: none;
    border-radius: 2em; 
    justify-self: center;
    align-self: center;
    text-align: center;

    min-width: 260px;
}

dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
}

dialog {
    transform:scale(0);
    animation: zoomIn var(--durationMedium) 0s cubic-bezier(0.28, 1.52, 0.6, 0.96) forwards;
}

dialog.PlayFadeOut {
    pointer-events: none;
    animation: zoomOut var(--durationMedium) 0s cubic-bezier(0.13, 1.05, 0.41, 0.97) forwards;
    animation-fill-mode: forwards;
}

dialog.PlayFadeOutBackdrop::backdrop {
    animation: fadeOut var(--durationMedium) 0s cubic-bezier(0.28, 1.52, 0.6, 0.96) forwards;
    animation-fill-mode: forwards;
}

@keyframes zoomIn {
    0% {
        transform:scale(0);
        filter: brightness(100%);
    }
    100% {
        transform:scale(1);
        opacity: 1;
    }
}
  
@keyframes zoomOut {
    0% {
        transform:scale(1);
    }
    100% {
        transform:scale(0);
    }
}
  
@keyframes fadeOut {
    0% {
        opacity: 1;
    }
    100% {
        opacity: 0;
    }
}

dialog h2 {
    font-family: 'LilitaOne';
    font-size: xxx-large;
    font-size: 2em;
    /* margin-top: 0; */
    margin: 0.5em 0;
    font-weight: 100;
    color: var(--colorTextNeutral);
}

dialog h3 {
    color: var(--colorTextNeutral);
    margin: 0;
}

/* CHARACTER SELECT SCREEN */

.fightersGrid {
    margin: 1em 0;
    display: flex;
    gap: 2em;
}

.fighterParent, .fighterParentVictory {
    display: flex;
    flex-direction: column;
    gap: 1em;

    background-color: rgba(255, 255, 255, 0);
    border-radius: 1em;
    padding: 1em;
    position: relative;
    overflow: hidden;
}

.fighterBacking, .fighterOverlayFlash {
    position: absolute;
    width: 100%;
    height: 100%;
    background: var(--colorPlayerOne);
    box-sizing: border-box;
    opacity: 0.25;
    z-index: -1;
    top: 0;
    left: 0;
}

.fighterOverlayFlash {
    z-index: 1;
    pointer-events: none;
    opacity: 0.5;

    animation: overlayFlash var(--durationFast2) ease-out 1;
    animation-fill-mode: forwards;
    background: white;
}

@keyframes overlayFlash {
    0% {
        opacity: 0.5;
    }

    100% {
        opacity: 0;
    }
}

[id='2'] .fighterBacking  {
    background: var(--colorPlayerTwo);
}

button {
    cursor: pointer;
}

.shuffleButton {
    height: var(--buttonHeight);
    width: var(--buttonHeight);
    padding: 0;
    border-radius: 50%;
    align-self: center;
    border: 0px solid var(--colorPlayerOne);
    /*
    background-image: var(--imageURLshuffle);
    background-size: 80%;
    background-repeat: no-repeat;
    background-position: center;
    */
    z-index: 2;
    background-color: white;

    /* to align the inner graphic */
    align-items: center;
    display: flex;
    justify-content: center;
    transition-duration: var(--durationFast);
}

[id='2'] .shuffleButton {
    border-color: var(--colorPlayerTwo);
}

.shuffleButton:hover {
    scale: 115%;
    border-width: 6px;

    transition-duration: var(--durationFast);
}

.shuffleButtonGraphic {
    width: 80%;
    height: 80%;

    /* stuff to get recolored SVG working */
    background-image: var(--imageURLshuffle);
    background-size: 0%;
    mask-image: var(--imageURLshuffle);
    mask-repeat: no-repeat;
    mask-position: center;

    background-color: var(--colorPlayerOne);
}

[id='2'] .shuffleButtonGraphic {
    background-color: var(--colorPlayerTwo);
}

.characterSelectAvatarParent {
    border-radius: 2em;
    border: 0.5em solid var(--colorPlayerOne);
    aspect-ratio: 1 / 1;
    overflow: hidden;
    transition: var(--durationFast2);
}

[id='2'] .characterSelectAvatarParent {
    border: 0.5em solid var(--colorPlayerTwo);
}

.characterSelectAvatar {
    width: 100%;
    height: 100%;
    transition: var(--durationFast2);
}

.characterSelectAvatarParent:hover {
    border-width: 1em;
    transition: var(--durationFast2);
}

.characterSelectAvatarParent:hover .characterSelectAvatar {
    filter: brightness(0.9);
    transform: scale(1.2);
    transition: var(--durationFast2);
}

.horizontalRow {
    display: grid;
    grid-template-columns: 1fr 1fr;
    height: var(--buttonHeight);
    gap: 0.5em;
}

.horizontalRowOneButton {
    display: grid;
    grid-template-columns: 0.5fr;
    justify-content: center;
    height: calc(var(--buttonHeight)* 1.2);
}

.ButtonNext {
    font-size: 1.5em;
    /*
    font-size: 2em;
    font-size: 2.5em;
    */
    /* font-weight: 100; */
    font-family: 'LilitaOne';
    font-family: "Poppins", sans-serif;
    font-weight: bolder;

    color: white;
    color: var(--colorTextNeutral);
    background-color: var(--colorTextNeutral);
    background-color: white;
    white-space: nowrap;
    border-color: var(--colorPanelBorder);
    border: 2px solid var(--colorPanelBorder);
    transition-duration: var(--durationFast);
}

.ButtonNext:hover {
    font-size: 2em;
    transition-duration: var(--durationFast);
    filter: brightness(90%);
    border-width: 6px;
    letter-spacing: 2px;
}

button:hover {
    transition-duration: var(--durationFast);
}

.inputContainer {
    position: relative;
    height: var(--buttonHeight);
}

.labelContainer {
    display: flex;
    align-items: center;
    justify-content: center;;
    
    color: silver;
    position: absolute;
    left: 0.5em;
    top: 0;
    /* padding: 0.25em; */
    pointer-events: none;
    transition: transform var(--durationFast2);
    transform-origin: left;
    height: 100%;
    z-index: 1;
}

input[type=text] {
    padding: 1em;
    font-size: 1em;
    border-radius: 0.5em;
    width: 100%;
    height: 100%;
    border: 2px solid silver;
    /* display: flex; */
    /* flex-grow: 1; */
    /* display: grid; */
    box-sizing: border-box;
}

.inputBorderExtra {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    border: 0 solid var(--colorTextNeutral);
    box-sizing: border-box;
    border-radius: 0.5em;
    pointer-events: none;
    transition: var(--durationFast2);
}

input:hover ~ .inputBorderExtra {
    border-width: 6px;
    transition: var(--durationFast2);
}

input + .labelContainer label {
  font-size: 16px;
  background-color: #ffffff00;
  border-radius: var(--borderRadiusSmall);
  padding: var(--borderRadiusSmall);
  opacity: 1;
  /*
  left: 0;
  top: 5px;
  */
  pointer-events: none; /* Label doesn't interfere with pointer events */
  transition: var(--durationFast2); /* Smooth transition for transformation */
  transform-origin: left; /* Think of this as an imaginary point around which all these transformations happen */
}

/* when selected, or has been filled out */
input:focus + .labelContainer label,
input:valid + .labelContainer label {
  transform: scale(0.5) translateY(-2.25em) translateX(0.3em); /* Scale down and move up on focus or non-empty input */
  transition: var(--durationFast2); /* Smooth transition for transformation */
  
  background-color: white;
  border-radius: var(--borderRadiusSmall);
  padding: var(--borderRadiusSmall);
  
}

.colorPickWrapper {
    height: 100%;
    width: 100%;
}

input[type="color"] {
    width: 100%;
    height: 100%;
    cursor: pointer;
    border-width: 2px;
    border-radius: var(--borderRadiusSmall);
    border-color: var(--colorTextNeutral);
    transition: var(--durationFast);
}

input[type="color"]:hover {
    border-width: 6px;
    transition: var(--durationFast);
}

/*
css code based on this codepen by "Coding Artist":
https://codepen.io/Coding-Artist/pen/poLrBxr
*/
input[type="checkbox"] {
    margin: 0;
    width: 100%;
    height: 100%;
}

input[type="checkbox"]:before {
	font-size: 1.5em;
    height: 100%;
    width: 100%;
    cursor: pointer;

	-webkit-transition: var(--durationFast);
	-o-transition: var(--durationFast);
	transition: var(--durationFast);
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	font-family: "Poppins", sans-serif;
	font-weight: 600;
    border: 2px solid silver;
    box-sizing: border-box;
    border-radius: var(--borderRadiusSmall);
	
    content: "CPU";
	background-color: #e5e5e5;
	color: #a0a0a0;
	letter-spacing: 1px;
	/*
    top: 0.42em;
	left: 0.42em;
    */
}
input[type="checkbox"]:checked {
	background: -o-linear-gradient(315deg, #8175fe, #89befe);
	background: linear-gradient(135deg, #8175fe, #89befe);
}
input[type="checkbox"]:checked:before {
	content: "Human";
    letter-spacing: normal;
    background-color: white;
	color: #89befe;
}
input[type="checkbox"]:hover, input[type="checkbox"]:hover:before {
    filter: brightness(95%);
    font-size: 1.2em;
    border-width: 6px;
}

button {
    border-radius: var(--borderRadiusSmall);
    /*
    height: var(--buttonHeight);
    */
    height: 100%;
}

.toggleCPUbutton {
    overflow: hidden;
}

/* VICTORY SCREEN MODAL */

.VictoryScreen {
    display: flex;
    flex-direction: column;
    gap: 1em;
}

.fighterParentVictory .nameTagParent {
    width: 220px;
    align-items: center;
    justify-content: center;
    padding: 0;
}

.VictoryScreen h2 {
    color: var(--colorPlayerCurrent);
}


/* INPUT BLOCK OVERLAY MODAL */

.gameGridRoot {
    position: relative;
}

.inputBlock, .whiteOverlay {
    height: 100%;
    width: 100%;
    position: absolute;
    z-index: 1;
    cursor: not-allowed;
}

.whiteOverlay {
    background: white;
    cursor: auto;
}

.inputBlockOverlayModal {
    width: 100%;
    height: 100%;
    background-color: #ffffff00;
}

.inputBlockOverlayModal::backdrop {
    background-color: #ffffff00;
}




/* FOOTER */

a {
    text-decoration: none;
    color: inherit;
}

footer {
    /*
    position: absolute;
    */
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    bottom: 0;
    height: 2.5rem; 
    text-align: center;
}

footer a {
    display:flex;
    justify-content: center;
}

footer img {
    width: 24px;
    height: 24px;
    cursor: pointer;
}

/* MAIN CONTENT */

.contentParent {
    display: flex;
    height: 100vh;
    flex-direction: column;
}

.main {
    text-align: center;
    background-color: white;
    
    display: flex;
    flex-direction: column;
    flex: 1;

    padding: var(--contentPadding) 0;
    gap: 2em;
    min-height: var(--minHeightContent);
    min-width: 250px;
}

/*
css trickery to get a perfect square that fits in a window taken from here:
https://stackoverflow.com/questions/77701214/constrain-a-responsive-square-inside-a-flex-item
*/
.gameGridParent {
    display: flex;
    flex: 1 0;
    flex-direction: column;
    
    align-items: center;
    justify-content: center;

    /*
    background-color: black;
    */
    container-type: size;
    width: 100%;
    gap: 1em;
}

.gameGrid {
    width: 80cqmin;
    height: 80cqmin;

    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 1.5%;
}

.gameGridSquare {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 8px;
    background-color: var(--gridSquareBg);

    cursor: pointer;
    
    background-size: 80% 80%;
    background-repeat: no-repeat;
    background-position: center;


    border-radius: 3em;
    border: 0.5em solid var(--colorPanelBorder);
    overflow: hidden;
}

/*
https://github.com/0xabdulkhalid/tic-tac-toe/blob/main/styles.css
*/
[class*='clicked'] {
    animation: bounce var(--durationFast) ease 1;
}

@keyframes bounce {
    50% {
        transform: scale(0.95);
    }

    100% {
        transform: scale(1);
    }
}

@keyframes fadeInOpacity {
    0% {
        scale: 0;
    }

    100% {
        scale: 1;
    }
}

[class*='fadingIn'] {
    animation: fadeInOpacity var(--durationMedium) cubic-bezier(0.28, 1.52, 0.6, 0.96) 1;
}

[class*='hidden'] {
    opacity: 0;
    scale: 0;
}

.gameGridSquare.occupied {
    cursor: default;
    background-color: var(--gridSquareBgOccupied);
}

.gameGridSquare.occupied.victory {
    background-color: var(--colorPlayerCurrent);
    border: 0.5em solid var(--colorPlayerCurrent);
}

.gameGridSquareSymbol {
    width: 100%;
    height: 100%;

    background-image: var('');
    background-size: 0%;
    mask-image: var('');
    mask-repeat: no-repeat;
    mask-position: center;
    mask-size: var(--currentSymbolSize);
}

/* hover state, preview the current player's symbol when they mouse over a panel */
.gameGridSquare:hover .gameGridSquareSymbol:not(.gameGridSquare.occupied .gameGridSquareSymbol) {
    background-image: var(--currentSymbolURL);
    mask-image: var(--currentSymbolURL);
    background-color: var(--colorPlayerCurrent);
    opacity: 50%;
    mask-size: var(--currentSymbolSize);
}

.gameGridSquare.playerX .gameGridSquareSymbol {
    background-image: var(--imageURLx);
    mask-image: var(--imageURLx);
    background-color: var(--colorPlayerOne);
    mask-size: var(--sizePercentPlayerOne); /* 65% */
}


.gameGridSquare.playerO .gameGridSquareSymbol {
    background-image: var(--imageURLo);
    mask-image: var(--imageURLo);
    background-color: var(--colorPlayerTwo);
    mask-size: var(--sizePercentPlayerTwo); /* 83 */
}

/* placing this further down overrides the above background-color lines */
.gameGridSquare.victory .gameGridSquareSymbol {
    background-color: white;
}

/* player HUD */

.hudParent {
    display: flex;
    justify-content: center;
    align-items: center;
    /*
    background-color: lightgray;
    */
    width: 80cqmin;
}

.activePlayerBackground {
    border-radius: 6em;
    padding: 0.5em;
    overflow: hidden;
    /*
    min-width: 112px;
    */
    flex-grow: 1;
    /*
    max-width: 280px;
    */
    max-width: 35cqmin;
    width: 100%;
}

.activePlayerBackground.active {
    background-color: var(--colorPlayerOne);
    color: white;
}

.activePlayerBackground.active.playerTwo {
    background-color: var(--colorPlayerTwo);
}


.canHover:not(.gameGridSquare.occupied):hover {
    transform: scale(1.1);
    transition: transform var(--durationFast);
}

.canHover:not(.gameGridSquare.occupied) {
    transform: scale(1);
    transition: transform var(--durationFast);
}

.playerHUD {
    display: flex;
    flex-direction: row;
    justify-content: start;
    align-items: center;
    border: 6px solid var(--colorPlayerOne);
    border-radius: 6em;
    gap: 0.5em;
    color: var(--colorPlayerOne);
    overflow: hidden;
}

.playerTwo .playerHUD {
    border: 6px solid var(--colorPlayerTwo);
    color: var(--colorPlayerTwo);
}

.activePlayerBackground.active .playerHUD {
    color: white;
}

.activePlayer {
    background-color: var(--colorPlayerOne);
    color: white;
}

.playerHUD img {
    border-radius: 50%;
    height: 10cqmin;
    /*
    height: 100px;
    min-width: 100px;
    */
}

.nameTagParent {
    padding: 0 1em 0 0;
    overflow: hidden;
    flex: 1;
    height: 10cqmin; 
    align-items: center;
    display: flex;
}

.playerHUD p {
    margin: 0;
    font-weight: 600;
    font-size: small;
    text-align: start;

    /*
    text-overflow: ellipsis;
    width: 100%;
    overflow-wrap: break-word;
    overflow: hidden;    
    overflow: hidden;
    hyphens: auto;
    */
}

.gapBetweenPlayers {
    flex: 1;
}


/* ASPECT RATIOS */




/* MOBILE ASPECT RATIO */
@media (max-width: 460px) {

    .hudParent {
        flex-direction: column;
    }

    .main {
        min-height: auto;
    }

    .playerHUD {
        /*
        gap: 0;
        */
    }

    .playerHUD p {
        font-size: small;
    }

    .activePlayerBackground {
        flex-grow: 0;
        
        max-width: 100%;
        width: 100%;

        box-sizing: border-box;
    }
}

@media (max-width: 640px) or (max-height: 600px) {

    /* CHARACTER SELECT SCREEN */

    dialog {
        /* width: 90vw; 
        width: 100%; */
        box-sizing: border-box;
        padding: 1em;
    }

    .fightersGrid {
        flex-direction: column;
        gap: 1em;
    }

    .fighterParent {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr;        
        grid-template-rows: repeat(3, var(--buttonHeightMobile));
        grid-template-rows: repeat(3, 1fr);        
        aspect-ratio: 5 / 3;
        gap: 0.5em;
    }

    .inputContainer {
        grid-column: span 2;
        order: 2;
        overflow: hidden;        
        height: auto;
    }

    .horizontalRow {
        grid-template-columns: 1fr;
        grid-template-rows: 1fr 1fr;
        height: auto;
        grid-row: span 2;
    }

    .shuffleButton {
        position: absolute;
        top: 0.5em;
        left: 0.5em;
    }

    .SelectScreenModal h2 {
        font-size: large;
    }

    .characterSelectAvatarParent {
        /*
        max-height: calc(var(--buttonHeight)* 2);
        */        
        grid-row: span 2;    

        height: 100%;
        box-sizing: border-box;

        display: flex;
        justify-content: center;
        align-items: center;
    }

    .characterSelectAvatar {
        height: auto;
    }
}

@media (max-height: 660px) {


    .shuffleButton {
        position: absolute;
        top: 0.5em;
        left: 0.5em;
    }
}

@media (orientation: landscape) and (min-height: 400px) and (min-width: 600px) {
    .fighterParent {
        aspect-ratio: auto;
    }
}

@media (min-width: 640px) and (max-height: 600px) {
    .fightersGrid {
        flex-direction: row;        
        justify-content: center;
    }

    dialog {
        width: auto;
    }
}


/* hide the footer in landscape mobile view */
@media (orientation: landscape) and (max-height: 640px) {
    footer {
        display: none;
    }

    .hudParent {
        flex-direction: row;
    }

    /* also, victory screen stuff */
    .VictoryScreenModal .nameTagParent {
        height: auto;
        max-height: 25cqmin;
    }

    .VictoryScreenModal .characterSelectAvatarParent {
        width: 100%;
        max-width: 25cqmin;
    }

    .fighterParentVictory {
        flex-direction: row;
        align-items: center;
    }

    .VictoryScreenModal .nameTagParent {
        overflow: visible;
    }
}

@media (min-width: 640px) and (min-height: 700px) {
    .playerHUD p {
        font-size: large;
    }
}


@media (min-width: 800px) and (min-height: 900px) {
    .gameGridParent {
        gap: 2em;
    }

    .playerHUD {
        gap: 1em;
    }

    .playerHUD p {
        font-size: x-large;
    }
}